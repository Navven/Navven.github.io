<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Retr02</title>
  
  <subtitle>欲成大树勿与草争</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://retr02.com/"/>
  <updated>2018-12-26T02:54:01.130Z</updated>
  <id>http://retr02.com/</id>
  
  <author>
    <name>Retr02</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Quick Start</title>
    <link href="http://retr02.com/2018/10/26/Docker%20Quick%20Start/"/>
    <id>http://retr02.com/2018/10/26/Docker Quick Start/</id>
    <published>2018-10-25T16:27:15.000Z</published>
    <updated>2018-12-26T02:54:01.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/dockerLogo.png" alt=""></p><hr><h2 id="Docker-是一个开源的应用容器引擎，而一个容器containers其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的-Linux-机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。"><a href="#Docker-是一个开源的应用容器引擎，而一个容器containers其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的-Linux-机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。" class="headerlink" title="Docker 是一个开源的应用容器引擎，而一个容器containers其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。"></a>Docker 是一个开源的应用容器引擎，而一个容器containers其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</h2><ul><li>Docker 的局限性之一，它只能用在 64 位的操作系统上。</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title=" 目录"></a> <strong>目录</strong></h2><!-- TOC --><ul><li><a href="#新版本安装方式">新版本安装方式</a></li><li><a href="#旧版本安装方式">旧版本安装方式</a></li><li><a href="#命令介绍">命令介绍</a></li><li><a href="#服务管理">服务管理</a></li><li><a href="#镜像管理">镜像管理</a><ul><li><a href="#通过容器创建镜像">通过容器创建镜像</a></li><li><a href="#通过dockerfile创建镜像">通过DockerFile创建镜像</a></li><li><a href="#发布自己的镜像">发布自己的镜像</a></li><li><a href="#镜像中安装环境">镜像中安装环境</a></li></ul></li><li><a href="#容器管理">容器管理</a><ul><li><a href="#容器服务管理">容器服务管理</a></li><li><a href="#进入容器">进入容器</a></li></ul></li><li><a href="#文件拷贝">文件拷贝</a></li><li><a href="#docker私有仓库搭建">Docker私有仓库搭建</a><ul><li><a href="#部署registry">部署registry</a></li><li><a href="#部署管理工具harbor">部署管理工具Harbor</a></li></ul></li><li><a href="#卸载旧版本">卸载旧版本</a></li><li><a href="#参考资料">参考资料</a></li><li><a href="#错误记录">错误记录</a></li></ul><!-- /TOC --><hr><p>Docker 从 1.13 版本之后采用时间线的方式作为版本号，分为社区版 <code>CE</code> 和企业版 <code>EE</code>，社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><p>社区版按照 <code>stable</code> 和 <code>edge</code> 两种方式发布，每个季度更新 <code>stable</code> 版本，如 17.06，17.09；每个月份更新 <code>edge</code> 版本，如17.09，17.10。</p><p>下面教程运行在 <code>Centos</code> 中</p><p>#新版本安装方式</p><p>Docker官方的安装教程 <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">轻点这里</a></p><p>安装一些必要的系统工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加软件源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># docker 官方源</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"># 阿里云源</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 更新yum缓存</span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line"># 安装docker-ce</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>如果你想指定<code>docker-ce</code>的版本,那么可以尝试执行以下命令,列出当前repo中的<code>docker-ce</code>的所有可用版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ yum list [package] --showduplicates | sort -r   </span><br><span class="line">  docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">  docker-ce.x86_64            17.03.0.ce-1.el7.centos            doscker-ce-stable </span><br><span class="line"></span><br><span class="line"># 选择要安装的版本</span><br><span class="line">$ sudo yum install docker-ce-&lt;VERSION&gt;</span><br><span class="line"># 选择安装18.06.1.ce-3.el7</span><br><span class="line">$ sudo yum install docker-ce.18.06.1.ce-3.el7</span><br></pre></td></tr></table></figure></p><p>启动Docker后台服务</p><p>#旧版本安装方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo install docker</span><br></pre></td></tr></table></figure></p><p>#命令介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ docker --help</span><br><span class="line"></span><br><span class="line">管理命令:</span><br><span class="line">  container         管理容器</span><br><span class="line">  image             管理镜像</span><br><span class="line">  network           管理网络</span><br><span class="line">  node              节点管理Swarm节点</span><br><span class="line">  plugin            插件管理</span><br><span class="line">  service           服务管理</span><br><span class="line">  system            Docker系统管理</span><br><span class="line">  volume            管理卷</span><br><span class="line">命令:</span><br><span class="line">  attach            附加到正在运行的容器</span><br><span class="line">  build             通过Dockerfile构建一个镜像</span><br><span class="line">  commit            从容器创建一个新的镜像</span><br><span class="line">  create            创建一个新容器</span><br><span class="line">  exec              在正在运行的容器中运行命令</span><br><span class="line">  history           显示镜像的历史记录 </span><br><span class="line">  images            列出镜像列表</span><br><span class="line">  kill              杀死一个或多个正在运行的容器</span><br><span class="line">  rm                移除一个或多个容器</span><br><span class="line">  rmi               移除一个或多个镜像</span><br><span class="line">  run               在新容器中运行指令</span><br><span class="line">  start             启动一个或多个已停止的容器</span><br><span class="line">  pull              从registry拉取镜像或存储库</span><br><span class="line">  push              将镜像或存储库推送到registry</span><br><span class="line">  ps                列出容器列表</span><br><span class="line">  search            在Docker Hub中搜索镜像</span><br><span class="line">  top               显示容器的运行进程</span><br></pre></td></tr></table></figure></p><p>#服务管理<br>$ su root<br>service docker start    启动Docker服务<br>service docker stop     停止Docker服务<br>service docker status   查看Docker服务状态<br>chkconfig docker on     设置为开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>#镜像管理<br>镜像可以看作是一个微小的系统,内部就是一个运行环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:latest  #拉取ubuntu镜像到本地</span><br><span class="line">docker images              #查看已拉取到本地的镜像列表</span><br><span class="line">docker rmi [image_id]     　#通过镜像ID删除镜像</span><br><span class="line"></span><br><span class="line"># 删除所有镜像</span><br><span class="line"># none 默认为docker.io</span><br><span class="line">docker rmi $(docker images | grep none | awk &apos;&#123;print $3&#125;&apos; | sort -r)</span><br><span class="line"></span><br><span class="line"># 以交互模式运行nginx容器,在容器内执行/bin/bash命令,可使用exit命令退出bash</span><br><span class="line">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure></p><h2 id="通过容器创建镜像"><a href="#通过容器创建镜像" class="headerlink" title="通过容器创建镜像"></a>通过容器创建镜像</h2><p>我们可以通过以下两种方式对镜像进行更改<br>    1.从已经创建的容器中更新镜像,并且提交这个镜像<br>    2.使用Dockerfile指令来创建一个新的镜像</p><p>下面通过已存在的容器创建一个新的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;My Image&quot; -a=&quot;navven&quot; 3ace90ecb4adb navven/nginx:v1.2.1</span><br></pre></td></tr></table></figure></p><blockquote><p>上面命令参数说明:</p><ul><li><code>-m</code> 描述提交内容</li><li><code>-a</code> 标识镜像坐着</li><li><code>3ace90ecb4adb</code> 这是容器ID,不是镜像ID</li><li><code>navven/nginx:v1.2.1</code> 被创建的镜像名</li></ul></blockquote><h2 id="通过DockerFile创建镜像"><a href="#通过DockerFile创建镜像" class="headerlink" title="通过DockerFile创建镜像"></a>通过DockerFile创建镜像</h2><p>假设创建一个node.js 镜像, 首先在node.js 项目根目录创建文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch Dockerfile .dockerignore</span><br></pre></td></tr></table></figure></p><p><code>.dockerignore</code> 文件用来排除无需打包进image文件的路径,如果你没有路径要排除,这个文件可以不新建.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">np-debug.log</span><br></pre></td></tr></table></figure></p><p>Dockerfile文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.2</span><br><span class="line">COPY . /local</span><br></pre></td></tr></table></figure></p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><h2 id="镜像中安装环境"><a href="#镜像中安装环境" class="headerlink" title="镜像中安装环境"></a>镜像中安装环境</h2><h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><h2 id="容器服务管理"><a href="#容器服务管理" class="headerlink" title="容器服务管理"></a>容器服务管理</h2><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><h1 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h1><h1 id="Docker私有仓库搭建"><a href="#Docker私有仓库搭建" class="headerlink" title="Docker私有仓库搭建"></a>Docker私有仓库搭建</h1><h2 id="部署registry"><a href="#部署registry" class="headerlink" title="部署registry"></a>部署registry</h2><h2 id="部署管理工具Harbor"><a href="#部署管理工具Harbor" class="headerlink" title="部署管理工具Harbor"></a>部署管理工具Harbor</h2><h1 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>官方英文资源  <a href="https://docs.docker.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a><br>中文资源 <a href="https://www.docker-cn.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a>   </p><h1 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">博主在执行`sudo yum install docker-ce` 的时候抛出以下异常</span><br></pre></td></tr></table></figure><p>Transaction check error:<br>  file /usr/bin/docker from install of docker-ce-cli-1:18.09.0-3.el7.x86_64 conflicts with file from pack<br>age docker-common-2:1.13.1-75.git8633870.el7.centos.x86_64</p><h2 id="错误概要"><a href="#错误概要" class="headerlink" title="错误概要"></a>错误概要</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果你也遇到了以上错误那请执行</span><br></pre></td></tr></table></figure><p>rm /usr/bin/docker    删除出现冲突的docker文件<br>$ yum list installed | grep docker 列出已安装的docker安装包<br>$ yum -y remove [docker.version] 删除安装包<br>$ yum –y remove docker.x86_64<br>$ yum -y remove docker-client.x86_64<br>$ yum -y remove docker-common.x86_64<br>$ rm -rf /var/lib/docker  删除docker镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**删除完毕之后可以检查是否删除成功**</span><br></pre></td></tr></table></figure></p><p>$ rm -rf /var/lib/docker<br>$<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后再次执行以下命令就可以成功安装docker-ce了</span><br></pre></td></tr></table></figure></p><p>sudo yum install docker-ce<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
